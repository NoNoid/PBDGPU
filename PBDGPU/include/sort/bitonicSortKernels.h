#ifndef BITONIC_KERNELS_H
#define BITONIC_KERNELS_H

const char * bitonic_STL_sort_source =
"__kernel                                           "
"\n void _kbitonic_stl_sort(                    	"
"\n             __global float *input_ptr,        	"
"\n             const unsigned int stage,           "
"\n             const int passOfStage)              "
"\n {                                    			"
"\n                                      			"
"\n      unsigned int  threadId = get_global_id(0);  					"
"\n      unsigned int  pairDistance = 1 << (stage - passOfStage);   	"
"\n      unsigned int  blockWidth = 2 * pairDistance;    				"
"\n                                                          			"
"\n      int compareResult;                                      		"
"\n      unsigned int  leftId = (threadId & (pairDistance - 1)) + 		"
"			(threadId >> (stage - passOfStage) ) * blockWidth;  		"
"\n      unsigned int  rightId = leftId + pairDistance;  				"
"\n        																"
"\n      float leftElement;  							"
"\n 	 float rightElement;							"
"\n    	 float greater;  						"
"\n    	 float lesser;  						"
"\n 													"
"\n		leftElement = input_ptr[leftId];				"
"\n		rightElement = input_ptr[rightId];				"
"\n 													"
"\n      unsigned int sameDirectionBlockWidth = threadId >> stage;   	"
"\n      unsigned int sameDirection = sameDirectionBlockWidth & 0x1; 	"
"\n      																"
"\n      float temp;													"
"\n      temp = sameDirection ? rightId : temp; 						"
"\n      rightId = sameDirection ? leftId : rightId; 					"
"\n      leftId = sameDirection ? temp : leftId;						"
"\n       																"
"\n      compareResult = (leftElement < rightElement); 					"
"\n       																"
"\n      greater = compareResult ? rightElement : leftElement; 		"
"\n      lesser = compareResult ? leftElement : rightElement; 		"
"\n       															"
"\n 	input_ptr[leftId] = lesser;				"
"\n 	input_ptr[rightId] = greater;			"
"\n }     										"
;

#endif

