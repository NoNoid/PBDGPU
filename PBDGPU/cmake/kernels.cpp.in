/*@AUTO_GENERATED_WARNING@*/

#include <kernels.hpp>
#include <util/functions.hpp>

static const string simulationParametersHeader(
R"END(
@SIMULATION_PARAMETERS_HEADER@
)END");

static const string predictionSource(
R"END(
@PREDICTION_KERNEL@
)END");

static const string updateSource(
R"END(
@UPDATE_KERNEL@
)END");

static const string kernelCollSource(
R"END(
@PLANE_COLL_KERNEL@
)END");

static const string particleHeader(
R"END(
@PARTICLE_HEADER@
)END");

static const string distanceConstraintDataHeader(
R"END(
@DISTANCE_CONSTRAINT_DATA_HEADER@
)END");

static const string bendingConstraintDataHeader(
R"END(
@BENDING_CONSTRAINT_DATA_HEADER@
)END");

static const string triangleBendingConstraintDataHeader(
R"END(
@TRIANGLE_BENDING_CONSTRAINT_DATA_HEADER@
)END");

static const string distanceConstraintKernelSource(
R"END(
@DISTANCE_CONSTRAINT_KERNEL_SOURCE@
)END");

static const string bendingConstraintKernelSource(
R"END(
@BENDING_CONSTRAINT_KERNEL_SOURCE@
)END");

static const string triangleBendingConstraintKernelSource(
R"END(
@TRIANGLE_BENDING_CONSTRAINT_KERNEL_SOURCE@
)END");

static const string atomicFloatFunctions(
R"END(
@ATOMIC_FLOAT_FUNCTIONS@
)END");

static const string postSolveUpdateSource(
R"END(
@POST_SOLVE_UPDATE_SOURCE@
)END");

static const string standardCompilerOptions("-D cl_float4=float4 -D cl_float3=float3 -D cl_float=float -D cl_int=int -D cl_uint=uint");

cl_kernel pbdgpu::buildPredictionKernel(cl_context context,cl_device_id device)
{

    return pbdgpu::createKernel(particleHeader + simulationParametersHeader + predictionSource,standardCompilerOptions,"prediction",context,device);
}

cl_kernel pbdgpu::buildUpdateKernel(cl_context context, cl_device_id device)
{
    return pbdgpu::createKernel(particleHeader+simulationParametersHeader+updateSource,standardCompilerOptions,"update",context,device);
}

cl_kernel pbdgpu::buildPlaneCollisionKernel(cl_context context,cl_device_id device)
{
    return pbdgpu::createKernel(particleHeader+simulationParametersHeader+kernelCollSource,standardCompilerOptions,"planeCollision",context,device);
}

cl_kernel pbdgpu::buildDistanceConstraintKernel(cl_context context, cl_device_id device)
{
    return pbdgpu::createKernel(particleHeader+simulationParametersHeader+distanceConstraintDataHeader+atomicFloatFunctions+distanceConstraintKernelSource,standardCompilerOptions,"distanceConstraint",context,device);
}

cl_kernel pbdgpu::buildBendingConstraintKernel(cl_context context, cl_device_id device)
{
    return pbdgpu::createKernel(particleHeader+simulationParametersHeader+bendingConstraintDataHeader+atomicFloatFunctions+bendingConstraintKernelSource,standardCompilerOptions,"bendingConstraint",context,device);
}

cl_kernel pbdgpu::buildPostSolveUpdateKernel(cl_context context, cl_device_id device)
{
    return pbdgpu::createKernel(postSolveUpdateSource,standardCompilerOptions,"postSolveUpdate",context,device);
}

cl_kernel pbdgpu::buildTriangleBendingKernel(cl_context context, cl_device_id device)
{
    return pbdgpu::createKernel(
            particleHeader+
            simulationParametersHeader+
            bendingConstraintDataHeader+
            atomicFloatFunctions+
            triangleBendingConstraintKernelSource,
            standardCompilerOptions,"triangleBendingConstraint",context,device);
}
